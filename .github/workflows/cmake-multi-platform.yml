name: CMake on multiple platforms

on:
  push:
    branches: [ "main", "dev" ]
  pull_request:
    branches: [ "main", "dev" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        cpp_compiler: [g++, clang++, cl]
        include:
          - os: windows-latest
            cpp_compiler: g++
            c_compiler: gcc
          - os: ubuntu-latest
            cpp_compiler: g++
            c_compiler: gcc
          - os: ubuntu-latest
            cpp_compiler: clang++
            c_compiler: clang
        exclude:
          - os: windows-latest
            cpp_compiler: cl
          - os: windows-latest
            cpp_compiler: clang++
          - os: ubuntu-latest
            cpp_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Set up MinGW on Windows
      if: matrix.os == 'windows-latest' && matrix.cpp_compiler == 'g++'
      uses: egor-tensin/setup-mingw@v1
      with:
        architecture: x86_64

    - name: Add MinGW to PATH on Windows
      if: matrix.os == 'windows-latest' && matrix.cpp_compiler == 'g++'
      run: echo "C:\\mingw64\\bin" | Out-File -Append -FilePath $env:GITHUB_PATH

    - name: Install dependencies on Ubuntu
      if: matrix.os == 'ubuntu-latest'
      run: sudo apt-get update && sudo apt-get install -y cmake gcc g++ clang

    - name: Set reusable strings
      id: strings
      shell: bash
      run: echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      run: |
        cmake -B ${{ steps.strings.outputs.build-output-dir }} \
              -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
              -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
              -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
              -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest --build-config ${{ matrix.build_type }}

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-${{ matrix.os }}-${{ matrix.cpp_compiler }}
        path: ${{ steps.strings.outputs.build-output-dir }}
